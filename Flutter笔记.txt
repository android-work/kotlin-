	main(){
		Flutter是没有重载的
		hello("",10,1.4)-->10和1.4之间是有位置要求的，两者是可以不传值的
		hello2("",a:10,b:1.3)-->10和1.3位置可以交换，两者可以不传或传单个
	}
	函数中位置可选参数：[]
	int hello(String str,[int a,double b]){}
	函数中命名可选参数：{}
	int hello2(String str,{int a ,double b}){}
	
	函数作为参数或者返回值（函数一等公民）
	main(List<String> args){
		hello3(bar);
		hello4((a,b){
			return a+b;
		});-->50
		var dome1 = demo();
		print(dome1(20,30));-->600
	}
	void hello3(Function foo){
		foo();
	}
	void bar(){
		...
	}
	匿名函数
	hello3((){
		...
	});
	箭头函数：函数体只能有一行代码
	hello3(()=>print("abc"));
	关键字：typedef 
	typedef A = int Function(int a,int b);
	void hello4(A a){
		a(20 , 30);
	}
	==>
	void hello4(int foo(int a, int b)){
		foo(20 ,30);
	}
	将函数作为返回值
	A demo(){
		return (a,b){
			return a*b;
		};
	}
	
	特殊的赋值操作符
		??=   当原来的变量有值则不执行该操作，反正才会执行
		??  当操作符前面的变量有值，则使用前面的，如果为null则使用后面的
	级联运算符
		..
		eg:main(List<String> args){
			//一般使用
			var p = Person();
			p.name = "";
			p.eat();
			p.run();
			//级联运算符
			var p = Person()
				..name = ""
				..eat()
				..run(); ===>类似于java的链式调用
		}
		
		class Person{
			String name;
			void run(){
				..
			}
			void eat(){
				..
			}
		}
		
	定义类
	main(List<String> args){
		var p = Person("",0);
	}
	class Person{
		String name;
		int age;
		double height;
		
		Person(this.name,this.age);//语法糖
		
		//命名构造方法
		Person.withNameAgeHeight(this.name,this.age,this.height);  ==> Person(this.name,this.age,{double.height});
	}
	
	任意类型：dynamic 类似 object
		区别：object调用子类方法时，编译期会报错
			  dynamic调用子类方法时，编译不报错，运行时可能会有问题，不安全
	
	初始化列表
		main(List<String> args){
			
		}
		class Person{
			final String name;
			final int age;
			
			//构造方法花括号里面表示对象已经初始化完了，无法进行常量初始化
			
			Person(this.name,{int age}):this.age = age ?? 10{} ==>给age设定一个初始值
		}
		
	构造函数重定向
		class Person{
			String name;
			int age;
			
			Person(this.name):this.-internal(name,0);//构造函数重定向
			Person._internal(this.name,this.age);
		}
		
	判断两个对象是否相等：identical(p1,p2);
	工厂构造函数：factory修饰
		特点：可以手动返回一个对象，普通构造函数，不能手动返回
		class Person{
			String name;
			String color;
			factory Person.withName(String name){
				...
				return "";
			}
		}
		
	flutter的属性没有权限修饰符，通过"_"命名开头来区分私用和公有
	flutter的set/get方法
		main(List<String> args){
			final p = Person();
			p.setName = "";
			print(p.getName);
		}
		class Person{
			String name;
			//set方法
			set setName(String name){ ---> set setName(String name) => this.name = name;
				this.name = name;
			}
			//get方法
			String get getName{  --->  String get getName => return this.name;
				return this.name;
			} 
		}
		
	类的继承：extends
		Person(this.name,this.age):super(); //调用父类的构造方法
	抽象类：abstract
		无法进行实例化，但是可以通过工厂构造函数进行实例化
		通过@patch注解进行方法的实现
	关键子：external-->将方法的声明和实现分离
	
	Dart中没有定义接口的关键子，默认所有的类都是隐式接口,与继承不同，无法调用super方法
		class Running{
			void run(){}
		}
		class Super{
			void work(){}
		}
		class Person implement Super,Running{
			@Overraid
			void run(){}
			
			@Overraid
			void work(){}
		}
		
	混入：mixin
	枚举：enum
	
	
	MaterialApp
	Scaffold：脚手架--->帮助快速搭建页面======>相当于Android的activity7
		appBar:设置actionBar标题
		body:页面组件
		theme:主题样式(ThemeDate(primarySwatch:颜色值))
	
	Widget：(开发中不推荐直接使用Widget)
		StatefulWidget:有状态的Widget(在运行中，有些状态(数据)需要改变)
		StatelessWidget:无状态的Widget(内容是确定的，没有状态的改变)
		
	Row：可以放多个控件(类似Android中的Layout)
	
	@immutable：当前这个类是不可变的，类里面定义的所有的东西都是final的
	
	
	组件：
		Container:容器组件，详细属性看源码
			decoration:BoxDecoration(
				color:颜色  // 设置背景色
				border：Border.all( //边框
					color：颜色 //边框颜色
					width:  //边框宽度
				)
				borderRadius:BorderRadius.all(Radius.circular(圆角半径)) //边框圆角/圆形
			)
			padding:EdgeInsets.all(padding值) // 四个边的padding值
			padding:EdgeInsets.fromLTRB(四个边padding值) //分别设置四个边的padding值
			transform:Matrix4.(translationValues 平移、rotationZ 旋转、diagonal3Values 缩放等)
			alignment:Alignment. //内容基于容器的居中的位置
			
			
			
		Text:文本组件，详细属性看源码
			textAlign:文本对齐方式
			textDirection：文本方向
			overflow：文本超出的一个现实状态，(clip 裁剪、fade 渐隐、ellipsis 省略号)
			textScaleFactor：文字显示倍率(放大缩小)
			
		TestStyle:文本样式组件，详细属性看源码
			letterSpacing:文本间间隙(负值文本更紧凑)
			fontStyle:文字样式(italic 斜体、normal 正常样式)
			fontWeight：字体粗细(bold 粗体、normal 正常体)FontWeight.获取系统字体粗细
			decoration:文字装饰线(none 无线、lineThrough 删除线、overline 上划线、underline 下划线)
			decorationColor：装饰线颜色
			decorationStyle：装饰线风格(double 两根线、solid 一根实线、wavy 波浪线、dashed/dotted 虚线)

		button类：
			RaisedButton：带有阴影效果的按钮
			FlatButon：普通的按钮
			OutlineButton：点击带有动效按钮
			FloatingActionButton：右下角圆形的➕按钮
			1、去除按钮默认的一个margin值：materialTapTargetSize:MaterialTapTargetSize.shrinkWrap,去除默认值的padded属性构成宽高不足48px的情况
			2、设置button的大小
				Column(
					children:<Widget>[
						ButtonTheme(
							minWidth:30,
							height:30,
							child:FlatButton(
								padding:EdgeInsets.all(0),
								color:Color.red,
								materialTapTargetSize:MaterialTapTargetSize.shrinkWrap,
								child:Text("button"),
								textColor:Color.white,
								onPressed:(){"点击事件"},
							)
						)
					]
				)
		Image图片，使用建议外面套一层Container：
			Container(
				child:Image.network(
					"",
					alignment:图片相对容器的位置
					
					color：
					colorBlendMode:BlendMode.    //color 、colorBlendMode结合使用，相当于Android中的tint属性
					
					fit:BoxFit.(fill 全图显示，图片被拉伸，填充父容器、contain 全图显示，按原比例显示 cover 			 图片需要填充整个容器且不变型，可能被拉伸、裁剪、fitWidth\fitHeight 宽/高填充)    //图片的填充模式， 相当于Android中的scaleType属性
					repeat：ImageRepeat.(repeat x、y轴方向都进行平铺(注：平铺不是铺满，而是类似复制图片)、repeatX/repeatY x/y轴方向平铺)//平铺
				)
			)
			
			Image(
				image:NetworkImage("url") 网络图片,
				width:
				height: // Image的宽高设置，不是设置图片宽高，而是结合ClipOver使用，展示圆形还是椭圆
				
				fit:BoxFit.    ,设置图片填充，类似Android的scaltype属性  BoxFit.fitWidth(宽度一定，高度自适应)
				alignment:Alignment.    ,设置图片在Image里的位置
				alignment:Alignment(x,y),设置图片的一个位置x,y的范围是(-1,1),当超过这个范围，图片就是被移出
			)
			1、占位图：
				FadeInImage(
					fadeOutDuration:Duration(
						milliseconds: 2//可以传小时，天，分，秒
					)  ,//设置图片退出的动画时间
					fadeInDuration:Duration(
						milliseconds: 2//可以传小时，天，分，秒
					)  ,//设置图片进入的动画时间
					placeholder:AssetImage(""),//缓冲预览图片
					image:NetworkImage("")//放一张网络图片
				)
				
			圆角图片：
				1、通过Container的decoration：BoxDecoration中的
					a、boraderRadius:BoraderRadius.all(Radius.circular)
					b、boraderRadius:BoraderRadius.circular()
				2、通过Container的image:DecorationImage(
										image:NetworkImage("")
										fit:BoxFit.cover
								  )
				3、ClipOvel(
					child:Image.network("")，
					width:,
					height:,
					fit:BoxFit.cover
				)
			
			引入本地图片：
				1、在根目录下新建images目录
				2、在images下新建2.0x、3.0x 目录
				3、每个文件中都放入图片
				4、在pubspec.yaml文件中，在assets：
												- images/图片名.png
												- images/2.0x/图片名.png
												- images/3.0x/图片名.png
				5、通过Image.asset("images/图片名.png")使用本地图片
		Icon字体图标：
			1、字体图标是矢量图(放大不会失真)
			2、字体图标可以设置颜色
			3、图标很多时，占据空间更小
		TextField输入框：
			TextField(
				decoration:InputDecoration(
					labelText:""//类似Android的hint只不过，输入框获焦时，提示文本会上移缩小，并不是消失
					icon:Icon()//一个提示图标
					hintText：“”
				)
			)
			1、如何点击按钮获取输入框中的信息
			声明一个变量：final textEditController = TextEditController();
			TextField有个属性controller:textEditController//进行绑定
			在按钮的响应中进行获取：textEditController.text就能够拿到输入框中的数据
			
	