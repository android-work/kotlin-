kotlin学习一、变量
	声明变量：var v：[变量类型]
	当声明一些变量无法保证其值是否为null，则可以这样定义： var name: String? = null（在类型右边加一个 ? 号，解除它的非空限制）
	当声明一个 "可空变量" 后,由于该变量引用，可能随时为null，那么去使用该变量引用就会出错，所以此时不用 "." 去引用而是使用 "?." 去引用而是使用
  例如：var view: View? = null
		view.setBackgroundColor(Color.RED)
		-------------->会报错，需要改为下面写法---------------->
		view?.setBackgroundColor(Color.RED)
	如果使用 "!!."(非空断言式的调用) 在编译时就不会进行非空的判断：view!!.setBackgroundColor(Color.RED)
  注：kotlin声明属性时需要给属性进行初始化，因为kotlin的变量中没有默认值，在kotlin中所有变量默认是不允许为null的，否则编译出错
	  变量需要手动初始化，如果不初始化的话会报错；
	  变量默认非空，所以初始化赋值 null 的话报错，之后再次赋值为 null 也会报错；
	  变量用 ? 设置为可空的时候，使用的时候因为「可能为空」又报错。
	延迟初始化：lateinit var view: View
		lateinit 的意思是：告诉编译器我没法第一时间就初始化，但我肯定会在使用它之前完成初始化的。加了这个 lateinit 关键字，这个变量的初始化就全靠你自己了，编译器不帮你检查了。
	类型推断：在声明时就赋值，那么在声明的时候可以不用进行类型的声明。
  例如：var v = 18   编译会自动添加为Int类型
	声明常量：val v = 18  ---->  final int v = 18;
  注：kotlin中默认修饰符均为public
  
kotlin学习二、函数
	函数声明：
		有返回值：fun cool(name: String): Food{...}
		无返回值：fun cool(name: String){...}  /  fun cool(name: String): Unit{...}
  注：可空变量传给不可空参数，报错
  
kotlin学习三、基本类型
	基本类型：
	在 Kotlin 中，所有东西都是对象，Kotlin 中使用的基本类型有：数字、字符、布尔值、数组与字符串。因此在kotlin中所有
	基本类型首字母大写。
  注：java中   int a = 1; //未装箱         ------------->        kotlin中     var a: Int = 1  //未装箱
			   Integer b = 2; //已装箱     ------------->		 java中		  var b: Int? = 1 //已装箱
	Kotlin 在语言层面简化了 Java 中的 int 和 Integer，但是我们对是否装箱的场景还是要有一个概念，因为这个牵涉到程序运行时的性能开销。
	因此在日常的使用中，对于 Int 这样的基本类型，尽量用不可空变量
	
	数组：
	声明数组：var array: IntArray = intArrayOf(1, 2)
  注： Kotlin 里面，条件满足如下之一就不装箱
	不可空类型。
    使用 IntArray、FloatArray 等创建数组。
	
kotlin学习四、类和对象
	声明一个类：class MainActivity : AppCompatActivity(){...}<------>class MainActivity constructor() : AppCompatActivity(){...}
  注：首先是类的可见性，Java 中的 public 在 Kotlin 中可以省略，Kotlin 的类默认是 public 的。
	  类的继承的写法，Java 里用的是 "extends" ，而在 Kotlin 里使用 ":" 还可以表示 Java 中的 "implement"
  例如：interface Impl {}  //接口没变
		class MainActivity : AppCompatActivity(), Impl {} //mainActiity继承AppCompatActivity实现Impl接口
	构造函数：
		Kotlin 把构造函数单独用了一个 constructor 
	  例如：class MainActivity : AppCompatActivity {//注：这里 AppCompatActivity 后面没有 '()'
				constructor() {}
			}
	
		override 的不同：
			Java 里面 @Override 是注解的形式。
			Kotlin 里的 override 变成了关键字。
			Kotlin 省略了 protected 关键字，也就是说，Kotlin 里的 override 函数的可见性是继承自父类的。
			
  注：在kotlin中默认类都是final类型的，无法进行继承，但可以使用 "open" 关键字进行接触限制，即使使用了 关键字 "open",子类依然是final，被继承依然需要 "open" 关键字接触限制
    例如：open class MainActivity : AppCompatActivity() {}
  注：关键字 "override" 具有遗传性 ，如果想要关闭遗传性，则使用 "final" 关键字前缀修饰即可
    例如：class NewActivity : MainActivity() {
		    // 👇onCreate 仍然是 override 的
			override fun onCreate(savedInstanceState: Bundle?) {                     open class MainActivity : AppCompatActivity() {
				...                                           --------------->            final override fun onCreate(savedInstanceState: Bundle?) {//onCreate将不能进行重写
		    }																			     ...
		   }																			  }
																					 }
																					 
	"abstract" 抽象关键字，用法与java没多大区别
	
	实例化对象：
		在 Kotlin 中，实例化一个对象更加简单，没有 new 关键字
		var activity: Activity = NewActivity();
		
	类型的判断和强转:
		在kotlin中，判断对象类型使用关键字 "is" 在java中使用的是 "instanceof"
		例如：fun main() {
				var activity: Activity = NewActivity()
				if (activity is NewActivity) {
					// 👇的强转由于类型推断被省略了
					activity.action()
				}
			  }
		可以使用关键字 "as" 进行直接强转，不用判断，但是如果一旦强转失败则会报错
		例如：(activity as NewActivity).action()
		在kotlin中，为了安全，可以使用 "as?" 来解决强转安全问题
		例如：(activity as? NewActivity)?.action()  //它的意思就是说如果强转成功就执行之后的调用，如果强转不成功就不执行。
	  注：(activity as? NewActivity)' 之后是一个可空类型的对象，所以，需要使用 "?." 来调用
	  
	  
kotlin学习五、对比java有哪些不同
	构造方法：
		java中的构造方法是 "类名()"
		kotlin中的构造方法是 "constructor()"前面没有修饰符
  注：Java 中构造器和类同名，Kotlin 中使用 constructor 表示。
	  Kotlin 中构造器没有 "public" 等修饰，因为默认可见性就是公开的
	  kotlin的构造方法另种写法
	    例如：class User constructor(name: String) {
				// 👇 这里与构造器中的 name 是同一个
				var name: String = name
			  }
	  这中写法叫做主构造器，前面写的叫做次构造器，在 Kotlin 中一个类最多只能有 1 个主构造器（也可以没有），而次构造器是没有个数限制
	  主构造器中的参数除了可以在类的属性中使用，还可以在 init 代码块中使用：
	    例如：class User constructor(name: String) {
				var name: String
				init {
					this.name = name
				}
			  } //其中 init 代码块是紧跟在主构造器之后执行的，这是因为主构造器本身没有代码体，init 代码块就充当了主构造器代码体的功能
	  如果类中有主构造器，那么其他的次构造器都需要通过 this 关键字调用主构造器，可以直接调用或者通过别的次构造器间接调用
	  我们从主构造器的特性出发，一旦在类中声明了主构造器，就包含两点：
		必须性：创建类的对象时，不管使用哪个构造器，都需要主构造器的参与
		第一性：在类的初始化过程中，首先执行的就是主构造器
	    例如：class User constructor(var name: String) {
                                   // 👇  👇 直接调用主构造器
				constructor(name: String, id: Int) : this(name) {
				}
                                                // 👇 通过上一个次构造器，间接调用主构造器
				constructor(name: String, id: Int, age: Int) : this(name, id) {
				}
			  }
	  通常主构造器中的 "constructor" 关键字可以省略,但有些场景，constructor 是不可以省略的，例如在主构造器上使用「可见性修饰符」或者「注解」
	    例如：class User private constructor(name: String) {
			      // 👆 主构造器被修饰为私有的，外部就无法调用该构造器
			  }
	  
	  主构造器中的参数可以在属性中进行赋值，其实还可以在主构造器中直接声明属性
	    例如：class User(var name: String) {
			  }
					// 等价于：如果在主构造器的参数声明时加上 var 或者 val，就等价于在类中创建了该名称的属性（property），并且初始值就是主构造器中该参数的值。
			  class User(name: String) {
				var name: String = name
			  }
			  
			  
	init{}代码块：（代码快的执行优先于构造方法）
		java中使用的代码块 "{...}"
		kotlin中使用代码块 "init{...}"
		
	final：
		在java中类不加 "final" 默认表示可以被继承
		在kotlin中类默认是加了 "final"
		在kotlin中final修饰成员变量、参数、局部变量的变化：
			在修饰成员变量时，"final" --->  "val"
			kotlin的参数中默认是 "val" 类型，所以前面没必要写 "val" 关键字
	  注：在kotlin中没有静态变量和静态方法
		在kotlin中想要定义静态常量使用关键字 "companion object" 
		  例如：class Sample {
					...
					companion object {
						val anotherString = "Another String"
					}
				}
		
	  注: 关键字 "object" 它的意思很直接：创建一个类，并且创建一个这个类的对象
		  他和java中的 "Object" 不一样，kotlin中没有 "Object" 代替它的是关键字 "Any" 所有类的基类
		例如：object Sample {
				val name = "A name"
			  } //可以直接使用Sample.name    ----->  这就是kotlin中的 单例模式
		通过 object 实现的单例是一个饿汉式的单例，并且实现了线程安全。
		"object" 类也具有继承和实现类的权利和普通的类一样
	
	匿名类：
		例如：val listener = object: ViewPager.SimpleOnPageChangeListener() {
				override fun onPageSelected(position: Int) {
					// override
					}
			  }
	  注：通过 "object" 修饰的对象中的变量和方法均为静态的，如果只想让类中的一部分函数和变量成为静态的，那么就使用
		  关键字 "companion object" 来修饰，将需要静态的成员放到 "companion object" 修饰的代码块中,同理静态代码块也是放在 其修饰下
		  当有 "companion" 修饰时，对象的名字也可以省略掉：
			例如：class A {										class A {
					companion object B {    ----------->			companion object {
						var c: Int = 0									var c: Int = 0
					}												}
				  }												}
	
	顶层声明：
		把属性和函数的声明不写在  class 里面
		  例如：	package com.hencoder.plus
​					// 👇 属于 package，不在 class/object 内
					fun topLevelFuncion() {
					}
		这样写的属性和函数，不属于任何 class，而是直接属于 package，它和静态变量、静态函数一样是全局的，但用起来更方便：你在其它地方用的时候，就连类名都不用写
		  例如：	import com.hencoder.plus.topLevelFunction // 👈 直接 import 函数
​					opLevelFunction()
	  
	  注：那在实际使用中，在 object、companion object 和 top-level 中该选择哪一个呢？简单来说按照下面这两个原则判断：
		  如果想写工具类的功能，直接创建文件，写 top-level「顶层」函数。
		  如果需要继承别的类或者实现接口，就用 object 或 companion object
		  
		  Kotlin 的常量必须声明在对象（包括伴生对象）或者「top-level 顶层」中，因为常量是静态的。
		  Kotlin 新增了修饰常量的 const 关键字。
		    例如：class Sample {
					companion object {
						const val CONST_NUMBER = 1
					}
				  }
​				  const val CONST_SECOND_NUMBER = 2

		  Kotlin 中只有基本类型和 String 类型可以声明成常量
			因为基本数据类型和String类型时，在编译期间就知道该常量在每一处调用的值，因此可以在编译时直接把这个值硬编码到代码里使用的地方。
			而非基本和 String 类型的变量，可以通过调用对象的方法或变量改变对象内部的值，这样这个变量就不是常量了
			

kotlin学习六、数组和集合
	数组：(不支持协变：不支持将子类数组赋值给父类数组)
		声明一个String数组：
			kotlin： val strs: Array<String> = arrayOf("a","b","c")  ---->  java:   String[] strs = {"a","b","c"};
				Kotlin 中获取或者设置数组元素和 Java 一样，可以使用方括号加下标的方式索引：
				
	集合：(支持协变)
	Kotlin 和 Java 一样有三种集合类型：List、Set 和 Map，它们的含义分别如下：
	List 以固定顺序存储一组元素，元素可以重复。
	Set 存储一组互不相等的元素，通常没有固定顺序。
	Map 存储 键-值 对的数据集合，键互不相等，但不同的键可以对应相同的值。
		声明一个集合：
			kotlin: val strList = listOf("a","b","c")   ----->   java:  List<String> strList = new ArrayList<>();...一系列add方法添加元素
			kotlin: val strSet = setOf("a","b","c")  ------>   java:  Set<String> strSet = new HashSet<>();
			kotlin: val map = mapOf("a" to 1,"b" to 2)  ----->  java: Map<String,Integer> map = new HashMap<>();...一系列put方法添加元素
				Kotlin 中的 Map 除了和 Java 一样可以使用 get() 根据键获取对应的值，还可以使用方括号的方式获取：
				  例如：val value1 = map.get("key1")
						val value2 = map["key2"]
				Kotlin 中也可以用方括号的方式改变 Map 中键对应的值
				  例如：val map = mapOf("key1" to 1, "key2" to 2)
						map.put("key1", 2)
						map["key1"] = 2  
						
	可变集合/不可变集合：用 mutableMapOf() 创建的 Map 才可以修改
		不可变集合：集合的 size 不可变、集合中的元素值不可变
		当不可变集合使用 toMutable*() 系函数转换为可变集合
		  例如：val strList = listOf("a", "b", "c")   strList.toMutableList()
	  注：toMutable*() 返回的是一个新建的集合，原有的集合还是不可变的，所以只能对函数返回的集合修改
	  
	Sequence：(和 Iterable 一样用来遍历一组数据并可以对每个元素进行特定的处理)


kotlin学习七、可见性修饰符
	public：公开，可见性最大，哪里都可以引用。
	private：私有，可见性最小，根据声明位置不同可分为类中可见和文件中可见。(外部类无法访问内部类的private成员)
	protected：保护，相当于 private + 子类可见。
	internal：内部，仅对 module 内可见。
	
  注：Kotlin 允许同一个文件声明多个 class 和 top-level 的函数和属性，所以 Kotlin 中允许类和接口声明为 private，因为同个文件中的其它成员可以访问
  
  
kotlin学习八、函数简化
	使用 = 连接返回值：
	  例如：fun area(width: Int, height: Int): Int {
				return width * height            =======》  fun area(width: Int, height: Int): Int = width * height
			}									 =======》  fun area(width: Int, height: Int) = width * height  //根据类型推断，所以省略函数返回值
  
  
  
  
  
  
  
  
  
  kotlin学习总结：
	构造方法总结：
		首先创建一个 User 类：
		class User {
		}
		
		添加一个参数为 name 与 id 的主构造器：
		class User(name: String, id: String) {
		}

		将主构造器中的 name 与 id 声明为类的属性：
		class User(val name: String, val id: String) {
		}

		然后在 init 代码块中添加一些初始化逻辑：
		class User(val name: String, val id: String) {
			init {
				...
			}
		}

		最后再添加其他次构造器：
		class User(val name: String, val id: String) {
			init {
				...
			}
    
			constructor(person: Person) : this(person.name, person.id) {
			}
		}
		
		
	":" 符号的使用：
		变量的声明：var id: Int
		类的继承：class MainActivity : AppCompatActivity() {}
		接口的实现：class User : Impl {}
		匿名类的创建：object: ViewPager.SimpleOnPageChangeListener() {}
		函数的返回值：fun sum(a: Int, b: Int): Int
			