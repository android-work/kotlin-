一、android事件分发
	1、android事件处理涉及到的三个重要函数
		事件分发方法：public boolean dispatchTouchEvent(MotionEvent ev)
			当有监听到事件时，首先由Activity进行捕获，进入事件分发处理流程。（因为activity没有事件拦截，View和ViewGroup有）会将事件传递给最外层View的dispatchTouchEvent(MotionEvent ev)方法，该方法对事件进行分发。　　
			return true ：表示该View内部消化掉了所有事件。
			return false ：事件在本层不再继续进行分发，并交由上层控件的onTouchEvent方法进行消费（如果本层控件已经是Activity，那么事件将被系统消费或处理）。　
			如果事件分发返回系统默认的 super.dispatchTouchEvent(ev)，事件将分发给本层的事件拦截onInterceptTouchEvent 方法进行处理
		
		事件拦截：public boolean onInterceptTouchEvent(MotionEvent ev)
			return true ：表示将事件进行拦截，并将拦截到的事件交由本层控件 的 onTouchEvent 进行处理；
			return false ：则表示不对事件进行拦截，事件得以成功分发到子View。并由子View的dispatchTouchEvent进行处理。
			如果返回super.onInterceptTouchEvent(ev)，默认表示拦截该事件，并将事件传递给当前View的onTouchEvent方法，和return true一样。
			
		
二、自定义控件
	1、圆形ImageView的展示
		a、可以使用BitmapShader
			
			public class ConstumImg extends ImageView {

				private Bitmap bitmap;
				private Paint paint;
				private Bitmap bitmap1;
				private int min;
				private int mRadius;

				public ConstumImg(Context context) {
					this(context,null);
				}

				public ConstumImg(Context context,AttributeSet attrs) {
					this(context, attrs,0);
				}

				public ConstumImg(Context context,AttributeSet attrs, int defStyleAttr) {
					super(context, attrs, defStyleAttr);
					init();
				}

				private void init() {
					paint = new Paint();
					paint.setAntiAlias(true);
			//        paint.setColor(Color.TRANSPARENT);
				}

				@Override
				protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
					super.onMeasure(widthMeasureSpec, heightMeasureSpec);

					min = Math.min(getMeasuredHeight(), getMeasuredWidth());
					setMeasuredDimension(min, min);

				}

				@Override
				protected void onDraw(Canvas canvas) {

					Drawable drawable = getDrawable();
					Bitmap bitmap = drawableToBitmap(drawable);

					BitmapShader bitmapShader = new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
					paint.setShader(bitmapShader);

					int scxla = min / Math.min(bitmap.getWidth(), bitmap.getHeight());
					Matrix matrix = new Matrix();
					matrix.setScale(scxla,scxla);

					bitmapShader.setLocalMatrix(matrix);

					canvas.drawRoundRect(new RectF(0,0,min,min),20,20,paint);//画圆角矩形
					canvas.drawCircle(min/2,min/2,min/2,paint);//画圆形


				}

				private Bitmap drawableToBitmap(Drawable drawable) {

					if (drawable instanceof BitmapDrawable){
						Bitmap bitmap = ((BitmapDrawable) drawable).getBitmap();
						return bitmap;
					}
					int h = drawable.getIntrinsicHeight();
					int w = drawable.getIntrinsicWidth();
					Bitmap bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);
					Canvas canvas = new Canvas(bitmap);
					drawable.setBounds(0,0,w,h);
					drawable.draw(canvas);
					return bitmap;
				}

			}
			
		b、可以使用Xfermode
			引用的模式：
			PorterDuff.Mode.CLEAR 所绘制不会提交到画布上。
			PorterDuff.Mode.SRC 显示上层绘制图片
			PorterDuff.Mode.DST 显示下层绘制图片
			PorterDuff.Mode.SRC_OVER 正常绘制显示，上下层绘制叠盖。
			PorterDuff.Mode.DST_OVER 上下层都显示。下层居上显示。
			PorterDuff.Mode.SRC_IN 取两层绘制交集。显示上层。
			PorterDuff.Mode.DST_IN 取两层绘制交集。显示下层。
			PorterDuff.Mode.SRC_OUT 取上层绘制非交集部分。
			PorterDuff.Mode.DST_OUT 取下层绘制非交集部分。
			PorterDuff.Mode.SRC_ATOP 取下层非交集部分与上层交集部分
			PorterDuff.Mode.DST_ATOP 取上层非交集部分与下层交集部分
			PorterDuff.Mode.XOR 异或：去除两图层交集部分
			PorterDuff.Mode.DARKEN 取两图层全部区域，交集部分颜色加深
			PorterDuff.Mode.LIGHTEN 取两图层全部，点亮交集部分颜色
			PorterDuff.Mode.MULTIPLY 取两图层交集部分叠加后颜色
			PorterDuff.Mode.SCREEN 取两图层全部区域，交集部分变为透明色
			
			
		
三、自定义属性


四、RecycleView的条目间隔设置
	public static class MyItemDecoration extends RecyclerView.ItemDecoration{
        @Override
        public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
            super.getItemOffsets(outRect, view, parent, state);
            int position = parent.getChildAdapterPosition(view);
            if (position % 2 == 0){
                //第一列条目
                outRect.left = 10;
                outRect.bottom = 6;
            }else{
                outRect.left = 6;
                outRect.bottom = 6;
                outRect.right = 10;
            }
        }
    }
	

六、动态申请权限

	private static final int REQUEST_EXTERNAL_STORAGE = 1;
    private static String[] PERMISSIONS_STORAGE = {
            "android.permission.READ_EXTERNAL_STORAGE",
            "android.permission.WRITE_EXTERNAL_STORAGE" };
	
	//申请权限	
	public static void verifyStoragePermissions(Activity activity) {

        try {
            //检测是否有写的权限
            int permission = ActivityCompat.checkSelfPermission(activity,
                    "android.permission.WRITE_EXTERNAL_STORAGE");
            if (permission != PackageManager.PERMISSION_GRANTED) {
                // 没有写的权限，去申请写的权限，会弹出对话框
                ActivityCompat.requestPermissions(activity, PERMISSIONS_STORAGE,REQUEST_EXTERNAL_STORAGE);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
	
	/**开启activity的返回值方法*/
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        switch (requestCode) {
            case CODE_SELECT_IMAGE:
                if (resultCode == RESULT_OK && data != null) {
                    selectPic(data);
                }
                break;
        }
    }

    //获取手机相册图片地址
    private void selectPic(Intent intent) {
        Uri selectImageUri = intent.getData();
        String[] filePathColumn = {MediaStore.Images.Media.DATA};
        Cursor cursor = getContentResolver().query(selectImageUri, filePathColumn, null, null, null);
        cursor.moveToFirst();
        int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
        String picturePath = cursor.getString(columnIndex);
        cursor.close();
        Log.e("tag","picturePath:"+picturePath);
        call_photo.setImageBitmap(BitmapFactory.decodeFile(picturePath));

        //保存系统图片路径
        Utils.saveStr(App.CALL_PHONE,picturePath);
    }
	

设置RecycleView的条目间隔
	public class RVItemDecoration extends RecyclerView.ItemDecoration {

		private int columns;
		private int left;
		private int top;
		private int right;
		private int bottom;

		public RVItemDecoration(int columns , int left , int top , int right ,int bottom){

			this.columns = columns;
			this.left = left;
			this.top = top;
			this.right = right;
			this.bottom = bottom;
		}

		@Override
		public void getItemOffsets(@NonNull Rect outRect, @NonNull View view, @NonNull RecyclerView parent, @NonNull RecyclerView.State state) {
			super.getItemOffsets(outRect, view, parent, state);

			int position = parent.getChildLayoutPosition(view);
			if (position % columns == 0){
				outRect.left = left;
				outRect.top = top;
				outRect.right = right;
			}else{
				outRect.top = top;
				outRect.right = right;
			}
		}
	}
	